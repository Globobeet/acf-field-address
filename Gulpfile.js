
'use strict';

var gulp = require('gulp');
var gutil = require('gulp-util');
var browserify = require('browserify');
var watchify = require('watchify');
var buffer = require('vinyl-buffer');
var source = require('vinyl-source-stream');
var sourcemaps = require('gulp-sourcemaps');
var gulpif = require('gulp-if');
var jscs = require('gulp-jscs');
var eslint = require('gulp-eslint');
var less = require('gulp-less');
var autoprefixer = require('gulp-autoprefixer');
var minifyCSS = require('gulp-minify-css');
var livereload = require('gulp-livereload');
var formatter = require('eslint-friendly-formatter');

/** Constants */
var SRC_PATH = '.';
var JS_SRC_PATH = SRC_PATH + '/js';
var LESS_SRC_PATH = SRC_PATH + '/less/**/*.less';

var DIST_PATH = './dist';
var JS_DIST_PATH = DIST_PATH + '/bundle.js';


function standardHandler(err){
  // Notification
  // have not tried this yet sounds cool...
  //var notifier = Notification();
  //notifier.notify({ message: 'Error: ' + err.message });
  // Log to console
  gutil.log(gutil.colors.red('Error'), err.message);
  this.emit('end');
}

/* ------------------------- Gulp Tasks -------------------------------- */

gulp.task('default', ['build']);

// Watch Files For Changes
gulp.task('watch', ['watch1', 'watchjs']);

gulp.task('watch1', function() {
  livereload.listen();
  gulp.watch(JS_SRC_PATH + '/**/*.js', ['jscs', 'lint']);
  gulp.watch(LESS_SRC_PATH, ['less']);
});

// build for production or development
gulp.task('build', ['jscs', 'lint', 'js', 'less', 'version']);

// less task ---------------------------------------------------------

gulp.task('less', function() {

  return gulp.src(LESS_SRC_PATH)
    .pipe(sourcemaps.init())
    .pipe(less())
    .on('error', standardHandler)
    .pipe(autoprefixer({
      browsers: ['last 2 versions'],
      cascade: false
    }))
    .pipe(gulpif(gutil.env.production, minifyCSS()))
    .pipe(sourcemaps.write('.'))
    .pipe(gulp.dest(DIST_PATH))
    .pipe(livereload());

});

// Javascript Tasks ---------------------------------------------------------

// Code style checker
gulp.task('jscs', function() {
  return gulp.src(JS_SRC_PATH + '/**/*.js')
    .pipe(jscs({esnext: true, preset: 'google'}));
});

// lint
gulp.task('lint', function() {
  var config = {
    'no-console': gutil.env.production ? 1 : 0
  };
  return gulp.src(JS_SRC_PATH + '/**/*.js')
    .pipe(eslint(config))
    .pipe(eslint.format(formatter))
    .pipe(gulpif(gutil.env.production, eslint.failOnError()));
});

// browserify stuff below....
var jsTask = function(watch) {

  var bundler = browserify({
    debug: true
  });

  if (gutil.env.production) {
    bundler.plugin('minifyify', {output: JS_DIST_PATH});
  }

  bundler.add(JS_SRC_PATH + '/index.jsx');

  if (watch === 'WATCH_MODE') {
    bundler = watchify(bundler);
  }

  // add any other browserify options or transforms here
  bundler.transform('babelify');

  var bundle = function() {

    return bundler.bundle()
      // log errors if they happen
      .on('error', gutil.log.bind(gutil, 'Browserify Error'))
      .pipe(source(JS_DIST_PATH))
      .pipe(gulpif(!gutil.env.production, buffer()
          .pipe(sourcemaps.init({loadMaps: true}))
          .pipe(sourcemaps.write('.'))
      ))
      .pipe(gulp.dest('./'))
      .pipe(livereload());

  };

  bundler.on('update', bundle); // on any dep update, runs the bundler
  bundler.on('log', gutil.log); // output build logs to terminal

  return {
    bundle: bundle
  };

};

gulp.task('js', jsTask().bundle);

gulp.task('watchjs', jsTask('WATCH_MODE').bundle);


// The below task rewrites the main plugin file and updates all the information required by WordPress.
var fs = require("fs");
var p = JSON.parse(fs.readFileSync('./package.json'));
gulp.task('version', function() {

  var template = '<?php \n/*\n\
!!! Warning: This file is automatically generated from the build process. !!!\n\
!!! To update this file edit package.json and run gulp !!!\n\
Theme Name: <%= name %>\n\
Theme URI: <%= url %>\n\
Author: <%= author %>\n\
Author URI: <%= authorUrl %>\n\
Description: <%= description %>\n\
Version: <%= version %>\n\
License: <%= license %>\n\
License URI: <%= licenseUrl %>\n\
Text Domain: <%= textDomain %>\n\
*/\n\
include "bootstrap.php";\
';

  var compiled = gutil.template(template, {
    file: {
      path: 'acf-address.php'
    },
    name: p.wpMeta.name,
    url: p.wpMeta.url,
    author: p.author,
    authorUrl: p.wpMeta.authorUrl,
    description: p.description,
    version: p.version,
    license: p.license,
    licenseUrl: p.wpMeta.licenseUrl,
    textDomain: p.wpMeta.textDomain
  });

  fs.writeFile('style.css', compiled);

});
